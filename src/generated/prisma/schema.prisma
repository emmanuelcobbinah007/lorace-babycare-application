// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SizingType {
  Clothing
  Footwear
  Diapers
  NA
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String      @id @default(uuid()) @db.Uuid
  firstname String
  lastname  String
  email     String      @unique
  password  String
  role      UserRole    @default(USER)
  createdAt DateTime    @default(now())
  cart      Cart?
  orders    Order[]
  emailList EmailList[]
}

model Category {
  id            String        @id @default(uuid()) @db.Uuid
  name          String        @unique
  products      Product[]
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
}

model SubCategory {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  isHidden   Boolean   @default(false)
  categoryId String    @db.Uuid
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  createdAt  DateTime  @default(now())
}

model Product {
  id               String           @id @default(uuid()) @db.Uuid
  name             String
  descriptionShort String
  descriptionLong  String
  imageUrl         String
  price            Float
  stock            Int
  isHidden         Boolean          @default(false)
  sizingType       SizingType
  categoryId       String           @db.Uuid
  category         Category         @relation(fields: [categoryId], references: [id])
  subCategoryId    String           @db.Uuid
  subCategory      SubCategory      @relation(fields: [subCategoryId], references: [id])
  featuredProduct  FeaturedProduct?
  cartItems        CartItem[]
  orderItems       OrderItem[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model EmailList {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeaturedProduct {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @unique @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String     @unique @db.Uuid
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int      @default(1)
  size      String?
  cartId    String   @db.Uuid
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  isCompleted Boolean     @default(false)
  orderItems  OrderItem[]
  userId      String      @unique @db.Uuid
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int      @default(1)
  size      String?
  orderId   String   @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
